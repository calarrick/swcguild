I wasn't clear if you wanted this summary returned as a file through Git/GitHub or simply through Moodle, so I went this route as it will also provide you with my GitHub username.

Of the topics outlined in the pre-work syllabus (HTML/CSS/Javascript, CS basics, command line, etc.) this topic is hardly the most complex but is the one about which I had the least pre-existing grounding. While I had a general notion of the importance of version control for both solo and group projects (software and otherwise) and had vaguely heard of Subversion and GitHub, I am certainly a novice to both the concepts and vocabulary of the code repository (commit, push, pull, forking). 

I was also aware of GitHub in a rather crude way, as a website. I've even looked at snippets of PHP and Javascript on the site, in the browser, as models when grappling with web-related projects in my former (librarian) work life. But I had not delved deeply enough to understand the relationship between Git and GitHub and the way that what I was seeing on the web was just one view of a distributed structure for version controlled sharing/collaboration and development of source code. 

The Wise/Ward walk-through with the concurrent edits is what made it "click" for me. It is clear that I'll need a fair amount of practice to be really fluent with Git, but feel grounded after that example. Ultimately, this seems like a pretty elegant solution to the choice between passing around and attempting to track/manage various locally-edited drafts of work "free form" or of having everyone work on a single centralized version that could only deal with concurrent edits by locking users in and out or tolerating a lot of error/conflict. I still can see that staying on top of large software projects, or even single "documents" as large and complex as units of working code can be, will be non-trivial. (I'm curious what support Git and other tools provide for easy comprehension of changes during the merging process.) But I get how this model of source/version/branch control offers real advantages.  

One thing by which I was utterly stumpted until very carefully going through Chapter 2.2 of the Git documentation was the logic of the separation between "add" and "commit." It was hard to see why I would want untracked files in the directory in the first place. But I imagine that in "real world" project one may well want to commit changes on some content while still working on other content in the directory.

 